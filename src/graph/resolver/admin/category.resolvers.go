package resolver_admin

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	generated_admin "hshelby-tkcled-product/src/graph/generated/admin"
	graph_model "hshelby-tkcled-product/src/graph/generated/model"
	service_category "hshelby-tkcled-product/src/service/category"
)

// CategoryAdd is the resolver for the categoryAdd field.
func (r *mutationResolver) CategoryAdd(ctx context.Context, data graph_model.CategoryAdd) (*graph_model.Category, error) {
	input := &service_category.CategoryAddCommand{
		Name:        data.Name,
		Description: data.Description,
		ParentID:    data.ParentID,
	}

	result, err := service_category.CategoryAdd(ctx, input)
	if err != nil {
		return &graph_model.Category{}, err
	}

	return result.ConvertToModelGraph(), nil
}

// CategoryUpdate is the resolver for the categoryUpdate field.
func (r *mutationResolver) CategoryUpdate(ctx context.Context, data graph_model.CategoryUpdate) (*graph_model.Category, error) {
	input := &service_category.CategoryUpdateCommand{
		CategoryID: data.CategoryID,

		Name:        data.Name,
		Description: data.Description,
	}

	result, err := service_category.CategoryUpdate(ctx, input)
	if err != nil {
		return &graph_model.Category{}, err
	}

	return result.ConvertToModelGraph(), nil
}

// CategoryDelete is the resolver for the categoryDelete field.
func (r *mutationResolver) CategoryDelete(ctx context.Context, data graph_model.CategoryDelete) (*graph_model.Category, error) {
	input := &service_category.CategoryDeleteCommand{
		CategoryID: data.CategoryID,
	}

	result, err := service_category.CategoryDelete(ctx, input)
	if err != nil {
		return &graph_model.Category{}, err
	}

	return result.ConvertToModelGraph(), nil
}

// CategoryDetail is the resolver for the categoryDetail field.
func (r *queryResolver) CategoryDetail(ctx context.Context, categoryID string) (*graph_model.Category, error) {
	input := &service_category.CategoryDetailCommand{
		CategoryID: categoryID,
	}

	result, err := service_category.CategoryDetail(ctx, input)
	if err != nil {
		return &graph_model.Category{}, err
	}

	return result.ConvertToModelGraph(), nil
}

// CategoryList is the resolver for the categoryList field.
func (r *queryResolver) CategoryList(ctx context.Context, parentID string) ([]graph_model.Category, error) {
	input := service_category.CategoryListCommand{
		ParentID: parentID,
	}

	categories, err := service_category.ListCategory(ctx, input)
	if err != nil {
		return []graph_model.Category{}, err
	}

	result := []graph_model.Category{}

	for _, category := range categories {
		result = append(result, *category.ConvertToModelGraph())
	}

	return result, nil
}

// Mutation returns generated_admin.MutationResolver implementation.
func (r *Resolver) Mutation() generated_admin.MutationResolver { return &mutationResolver{r} }

// Query returns generated_admin.QueryResolver implementation.
func (r *Resolver) Query() generated_admin.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
