package resolver_admin

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	generated_admin "hshelby-tkcled-product/src/graph/generated/admin"
	graph_model "hshelby-tkcled-product/src/graph/generated/model"
	service_category "hshelby-tkcled-product/src/service/category"
)

// Parent is the resolver for the parent field.
func (r *categoryResolver) Parent(ctx context.Context, obj *graph_model.Category) (*graph_model.Category, error) {
	if obj.Parent.ID == "" {
		return &graph_model.Category{}, nil
	}

	input := &service_category.CategoryDetailCommand{
		CategoryID: obj.Parent.ID,
	}

	result, err := service_category.CategoryDetail(ctx, input)
	if err != nil {
		return &graph_model.Category{}, err
	}

	return result.ConvertToModelGraph(), nil
}

// Children is the resolver for the children field.
func (r *categoryResolver) Children(ctx context.Context, obj *graph_model.Category) ([]graph_model.Category, error) {
	input := service_category.CategoryListCommand{
		ParentID: obj.ID,
	}

	categories, err := service_category.ListCategory(ctx, input)
	if err != nil {
		return []graph_model.Category{}, err
	}

	result := []graph_model.Category{}

	for _, category := range categories {
		result = append(result, *category.ConvertToModelGraph())
	}

	return result, nil
}

// Category returns generated_admin.CategoryResolver implementation.
func (r *Resolver) Category() generated_admin.CategoryResolver { return &categoryResolver{r} }

type categoryResolver struct{ *Resolver }
