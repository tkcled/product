package resolver_admin

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	graph_model "hshelby-tkcled-product/src/graph/generated/model"
	service_product "hshelby-tkcled-product/src/service/product"

	"github.com/99designs/gqlgen/graphql"
)

// ProductAdd is the resolver for the productAdd field.
func (r *mutationResolver) ProductAdd(ctx context.Context, data graph_model.ProductAdd) (*graph_model.Product, error) {
	input := &service_product.ProductAddCommand{
		Name:             data.Name,
		Image:            data.Image,
		Description:      data.Description,
		Code:             data.Code,
		UnitPrice:        data.UnitPrice,
		CatalogLink:      data.CatalogLink,
		CategoryID:       data.CategoryID,
		ParentCategoryID: data.ParentCategoryID,
	}

	result, err := service_product.ProductAdd(ctx, input)
	if err != nil {
		return &graph_model.Product{}, err
	}

	return result.ConvertToModelGraph(), nil
}

// ProductUpdate is the resolver for the productUpdate field.
func (r *mutationResolver) ProductUpdate(ctx context.Context, data graph_model.ProductUpdate) (*graph_model.Product, error) {
	input := &service_product.ProductUpdateCommand{
		ProductID: data.ID,

		Name:             data.Name,
		Code:             data.Code,
		UnitPrice:        data.UnitPrice,
		CatalogLink:      data.CatalogLink,
		CategoryID:       data.CategoryID,
		Description:      data.Description,
		ParentCategoryID: data.ParentCategoryID,
	}

	result, err := service_product.ProductUpdate(ctx, input)
	if err != nil {
		return &graph_model.Product{}, err
	}

	return result.ConvertToModelGraph(), nil
}

// ProductDelete is the resolver for the productDelete field.
func (r *mutationResolver) ProductDelete(ctx context.Context, data graph_model.ProductDelete) (*graph_model.Product, error) {
	input := &service_product.ProductDeleteCommand{
		ProductID: data.ID,
	}

	result, err := service_product.ProductDelete(ctx, input)
	if err != nil {
		return &graph_model.Product{}, err
	}

	return result.ConvertToModelGraph(), nil
}

// ProductDetail is the resolver for the productDetail field.
func (r *queryResolver) ProductDetail(ctx context.Context, productID string) (*graph_model.Product, error) {
	input := &service_product.ProductDetailCommand{
		ProductID: productID,
	}

	result, err := service_product.ProductDetail(ctx, input)
	if err != nil {
		return &graph_model.Product{}, err
	}

	return result.ConvertToModelGraph(), nil
}

// ProductPagination is the resolver for the productPagination field.
func (r *queryResolver) ProductPagination(ctx context.Context, page int, limit int, orderBy *string, search map[string]interface{}) (*graph_model.ProductPagination, error) {
	input := &service_product.ProductPaginationCommand{
		Page:  page,
		Limit: limit,
	}

	if orderBy != nil {
		input.OrderBy = *orderBy
	}

	if search != nil {
		input.Search = search
	}

	total, result, err := service_product.ProductPagination(ctx, input)
	if err != nil {
		if graphql.GetErrors(ctx) == nil {
			return nil, err
		}
		return nil, nil
	}

	products := make([]graph_model.Product, 0)
	for i := 0; i < len(result); i++ {
		products = append(products, *result[i].ConvertToModelGraph())
	}

	return &graph_model.ProductPagination{
		Rows: products,
		Paging: graph_model.Pagination{
			CurrentPage: page,
			Limit:       limit,
			TotalPage:   CalculateTotalPage(total, limit),
			Total:       total,
		},
	}, nil
}
